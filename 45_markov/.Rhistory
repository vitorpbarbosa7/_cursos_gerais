# shannon's entropy
# sum(p_i * log2(1/p_i))
epsilon = 1e-10
madj = madj + epsilon
# normalize
madj = t(apply(madj, 1, function(row) {row / sum(row)}))
madj
# madj * log2(1/madj)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj = c(c(0,1,0),c(0.25,0.5,0.25),c(0.5,0.5,0))
# shannon's entropy
# sum(p_i * log2(1/p_i))
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row)}))
M * log2(1/M)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj = c(c(0,1,0),c(0.25,0.5,0.25),c(0.5,0.5,0))
# shannon's entropy
# sum(p_i * log2(1/p_i))
epsilon = 1e-10
madj = madj + epsilon
M = t(apply(madj, 1, function(row) {row / sum(row)}))
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj = c(c(0,1,0),c(0.25,0.5,0.25),c(0.5,0.5,0))
madj = as.matrix(madj)
# shannon's entropy
# sum(p_i * log2(1/p_i))
epsilon = 1e-10
madj = madj + epsilon
madj
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row)}))
M * log2(1/M)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj = c(c(0,1,0),c(0.25,0.5,0.25),c(0.5,0.5,0))
madj = as.matrix(madj)
# shannon's entropy
# sum(p_i * log2(1/p_i))
epsilon = 1e-10
madj = madj + epsilon
madj
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row)}))
entropies = M * log2(1/M)
View(entropies)
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj = c(c(0,1,0),c(0.25,0.5,0.25),c(0.5,0.5,0))
madj = as.matrix(madj)
# shannon's entropy
# sum(p_i * log2(1/p_i))
epsilon = 1e-10
madj = madj + epsilon
madj
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
cat(M)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj = c(c(0,1,0),c(0.25,0.5,0.25),c(0.5,0.5,0))
madj = as.matrix(madj)
cat(madj)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
cat(madj)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj
epsilon = 1e-10
madj = madj + epsilon
madj
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
cat(M)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
# shannon's entropy
# sum(p_i * log2(1/p_i))
epsilon = 1e-10
madj = madj + epsilon
madj
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
# shannon's entropy
# sum(p_i * log2(1/p_i))
epsilon = 1e-10
madj = madj + epsilon
madj
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
M
entropies = M * log2(1/M)
entropies
sum(entropies)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
entropy_system = function(madj){
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return sum_entropy
}
entropy_system(madj)
entropy_system(madj2)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
entropy_system = function(madj){
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
entropy_system(madj)
entropy_system(madj2)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0, 0.05,0.9,0.05, 0.05,0.95,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
entropy_system = function(madj){
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
entropy_system(madj)
entropy_system(madj2)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0, 0.05,0.9,0.05, 0.05,0.95,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
entropy_system = function(madj){
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
e1 = entropy_system(madj)
e2 = entropy_system(madj2)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0, 0.05,0.9,0.05, 0.05,0.95,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
entropy_system = function(madj){
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
e1 = entropy_system(madj)
e2 = entropy_system(madj2)
cat(e1)
cat(e2)
View(X_train)
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0, 0.05,0.9,0.05, 0.05,0.95,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
madj3.data <- c(0,1,0,0,  0.025,0.8,0.025,0.15,  0,0,0,0)
madj3 = matrix(madj2.data, nrow = 4, ncol = 4, byrow = TRUE)
entropy_system = function(madj){
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
e1 = entropy_system(madj)
e2 = entropy_system(madj2)
e3 = entropy_system(madj3)
cat(e1)
cat(e2)
cat(e3)
# Grow When Required
# RSOM
# Self Organizing Novelty Detector
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0, 0.05,0.9,0.05, 0.05,0.95,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
madj3.data <- c(0,1,0,0,  0.025,0.8,0.025,0.15,  0,0,0,0)
madj3 = matrix(madj2.data, nrow = 4, ncol = 4, byrow = TRUE)
entropy_system = function(madj){
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
e1 = entropy_system(madj)
e2 = entropy_system(madj2)
e3 = entropy_system(madj3)
cat(e1)
cat(e2)
cat(e3)
entropies = c(e1,e2,e3)
plot(entropies)
# Grow When Required
# RSOM
# Self Organizing Novelty Detector
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0, 0.05,0.9,0.05, 0.05,0.95,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
madj3.data <- c(0,1,0,0,  0.025,0.8,0.025,0.15,  0.05,0.95,0,0,     0,0,0,0)
madj3 = matrix(madj2.data, nrow = 4, ncol = 4, byrow = TRUE)
entropy_system = function(madj){
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
e1 = entropy_system(madj)
e2 = entropy_system(madj2)
e3 = entropy_system(madj3)
cat(e1)
cat(e2)
cat(e3)
entropies = c(e1,e2,e3)
plot(entropies)
# Grow When Required
# RSOM
# Self Organizing Novelty Detector
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0, 0.05,0.9,0.05, 0.05,0.95,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
madj3.data <- c(0,1,0,0,  0.025,0.8,0.025,0.15,  0.05,0.95,0,0,     0,0,0,0)
madj3 = matrix(madj2.data, nrow = 4, ncol = 4, byrow = TRUE)
madj4.data <- c(0,0.9,0.1, 0.05,0.9,0.05, 0.05,0.95,0)
madj4 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
entropy_system = function(madj){
epsilon = 1e-10
madj = madj + epsilon
# normalize
M = t(apply(madj, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
e1 = entropy_system(madj)
e2 = entropy_system(madj2)
e3 = entropy_system(madj3)
e4 = entropy_system(madj4)
cat(e1)
cat(e2)
cat(e3)
cat(e4)
entropies = c(e1,e2,e3,e4)
plot(entropies)
# Grow When Required
# RSOM
# Self Organizing Novelty Detector
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0, 0.05,0.9,0.05, 0.05,0.95,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
madj3.data <- c(0,1,0,0,  0.025,0.8,0.025,0.15,  0.05,0.95,0,0,     0,0,0,0)
madj3 = matrix(madj2.data, nrow = 4, ncol = 4, byrow = TRUE)
madj4.data <- c(0,0.9,0.1, 0.05,0.9,0.05, 0.05,0.95,0)
madj4 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
entropy_system = function(m){
epsilon = 1e-10
m = m + epsilon
# normalize
M = t(apply(m, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
e1 = entropy_system(madj)
e2 = entropy_system(madj2)
e3 = entropy_system(madj3)
e4 = entropy_system(madj4)
cat(e1)
cat(e2)
cat(e3)
cat(e4)
entropies = c(e1,e2,e3,e4)
plot(entropies)
# Grow When Required
# RSOM
# Self Organizing Novelty Detector
# matriz de adjacencia
# probabilidade de transicao
# origem nas linhas
# destino nas colunas
#  0        1       2
#0 0        1       0
#1 0.25     0.5     0.25
#2 0.5      0.5     0
madj.data <- c(0,1,0,0.25,0.5,0.25,0.5,0.5,0)
madj = matrix(madj.data, nrow = 3, ncol = 3, byrow = TRUE)
madj2.data <- c(0,1,0, 0.05,0.9,0.05, 0.05,0.95,0)
madj2 = matrix(madj2.data, nrow = 3, ncol = 3, byrow = TRUE)
madj3.data <- c(0,1,0,0,  0.025,0.8,0.025,0.15,  0.05,0.95,0,0,     0,0,0,0)
madj3 = matrix(madj3.data, nrow = 4, ncol = 4, byrow = TRUE)
madj4.data <- c(0,0.9,0.1, 0.05,0.9,0.05, 0.05,0.95,0)
madj4 = matrix(madj4.data, nrow = 3, ncol = 3, byrow = TRUE)
entropy_system = function(m){
epsilon = 1e-10
m = m + epsilon
# normalize
M = t(apply(m, 1, function(row) {row / sum(row) } ))
entropies = M * log2(1/M)
# uncertainty about the system
sum_entropy = sum(entropies)
return(sum_entropy)
}
e1 = entropy_system(madj)
e2 = entropy_system(madj2)
# com variacao espacial
e3 = entropy_system(madj3)
# com variacao temporal
e4 = entropy_system(madj4)
cat(e1)
cat(e2)
cat(e3)
cat(e4)
entropies = c(e1,e2,e3,e4)
plot(entropies)
# Grow When Required
# RSOM
# Self Organizing Novelty Detector
