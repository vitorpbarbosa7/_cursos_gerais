licence()
contributors()
demo()
error.catching
q()
q()
4 + 5
#Subtra巫o
4 - 5
4 - 5
#Adi巫o
4 + 5
#Subtra巫o
4 - 5
#Divisao
4/6
#Multiplicacao
4*6
4*6e
4*6e
4*6e
4/6
4 - 5
4 ^2
4 ^ 4
2 %% 5
5 %% 2
jeca
jeca <- 24
jeca
variavel <- 10
variavel
string <- vitor
string <- 'vitor'
string
q()
q()
q()
variavel <- "Churros"
variavel
x <- 20 ^2
x
x / 200
clc()
clear()
ls()
q()
q()
ls
clear
cls
clear
l = [1,2,3]
l = (1,2,3)
l = c(1,2,3)
l
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\15_Valores_Missing")
# C칩digo para limpeza da tela
cat("\014")
#C칩digo para limpar a variable explorer
rm(list=ls())
#Dataframe para lidar com valores missing
dados = data.frame("a"=c(1,3,NA), "b" = c(4,NA,4), "c" = c(3,3,3))
View(dados)
dados
mean(dados$c)
mean(dados$a)
mean(dados$a, na.rm = T)
#Escrever esse banco de dados em csv para checar como isso acontece no pandas:
write.csv(dados, 'dados.csv')
summary(dados)
#Fun칞칚o na.omit:
?na.omit()
na.omit(dados)
dados
na.fail(dados)
complete.cases(dados)
dados(complete.cases(dados))
dados(complete.cases(dados),)
dados[complete.cases(dados),]
?type
type(dados)
class(complete.cases(dados))
dim(comlete.cases(dados))
length(comlete.cases(dados))
length(comlete.cases(dados))
dim(complete.cases(dados))
length(complete.cases(dados))
dados[1,1]
dados[1,2]
dados[1,3]
dados[2,1]
dados[2,2]
dados[2,3]
dados[3,1]
dados[3,2]
dados[3,3]
dados[,]
dados[complete.cases(dados),]
#Oposto da complete.cases:
is.na(dados)
#Substitui칞칚o:
dados[is.na(dados)==TRUE] = mean(dados[,[is.na(dados),1]])
#Substitui칞칚o:
dados[is.na(dados)==TRUE] = 0
dados
#C츾췁digo para limpar a variable explorer
rm(list=ls())
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\17_Revisao")
# C칩digo para limpeza da tela
cat("\014")
#C칩digo para limpar a variable explorer
rm(list=ls())
data()
View(ChickWeight)
frango = ChickWeight
View(frango)
str(frango)
?str
#Histograma
hist(frango$weight)
#Histograma
hist(frango$weight, freq = T)
#Histograma
hist(frango$weight, freq = F)
mean((frango$weight))
median(frango$weight)
#Add vertical line:
?abline
example(abline)
abline(v=mean(frango$weight))
#Add vertical line:
?abline
hist(frango$weight, freq = F)
abline(v=mean(frango$weight),lty=2)
hist(frango$weight, freq = F,xlab = "Peso")
abline(v=mean(frango$weight),lty=2)
names(frango)
data()
View(ChickWeight)
?ChickWeight
#Correla칞칚o:
cor(frango$weight,frango$Time)
plot(frango$Time,frango$weight)
View(frango)
#Boxplot:
boxplot(frango$weight)
plot(frango$Time,frango$weight)
#Correla칞칚o:
chart.Correlation(frango$weight,frango$Time)
corrplot(frango$weight,frango$Time)
install.packages(corrpl)
install.packages("corrplot")
corrplot(frango$weight,frango$Time)
#Correla칞칚o:
library(corrplot)
corrplot(frango$weight,frango$Time)
corrplot(frango)
corrplot(frango$weight,frango$Time,method='number')
correlacao = cor(frango$weight,frango$Time)
corrplot(correlacao,method='number')
correlacao = cor(frango)
corrplot(correlacao,method='number')
corrplot(frango,method='number')
corrplot([frango$weight,frango$Time],method='number')
corrplot([frango$weight,frango$Time],method="number")
correlacao = corr(frango)
correlacao = cor(frango)
correlacao
carros = mtcars
corrplot(carrocorrelacao, method = 'square')
carros = mtcars
carrocorrelacao = cor(carros)
corrplot(carrocorrelacao, method = 'square')
corrplot(carrocorrelacao, method = 'elipse')
corrplot(carrocorrelacao, method = 'ellipse')
corrplot(carrocorrelacao, method = 'shade')
install.packages(Perf)
install.packages("PerformanceAnalytics")
#칄 poss칤vel retornar boxplot a partir do plot:
plot(frango$Diet, frango$weight)
plot(frango$Diet, frango$Time)
#칄 poss칤vel retornar boxplot a partir do plot:
plot(frango$Diet, frango$weight)
#Fun칞칚o table:
table(frango$weight)
#Fun칞칚o table:
table(frango$time)
#Fun칞칚o table:
table(frango$Time)
table(frango$Diet)
mean(frango$weight)
sd(frango$weight)
tapply(frango$weight,frango$Diet,mean)
tapply(frango$weight, frango$Time, mean)
barplot(tapply(frango$weight, frango$Time, mean))
barplot(tapply(frango$weight,frango$Diet,mean))
barplot(tapply(frango$weight, frango$Time, mean))
abline(x=mean(frango$weight, lty=2))
barplot(tapply(frango$weight,frango$Diet,mean))
abline(x=mean(frango$weight, lty=2))
barplot(tapply(frango$weight,frango$Diet,mean))
abline(h=mean(frango$weight, lty=2))
barplot(tapply(frango$weight, frango$Time, mean))
abline(h=mean(frango$weight), lty=1)
?frango
n?ames(frango)
??frango
?ChickWeight
barplot(tapply(frango$weight, frango$Time, mean))
abline(h=mean(frango$weight), lty=1)
#Teste estat칤stico
dieta = []
#Teste estat칤stico
dieta = [,]
dieta = array()
for i in 1:4{
dieta[i] = frango[frango$Diet==i]
}
for (i in 1:4){
dieta[i] = frango[frango$Diet==i]
}
for (i in 1:4){
dieta[i] = frango[frango$Diet==i,]
}
View(dieta)
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\17_Revisao")
# C칩digo para limpeza da tela
cat("\014")
#C칩digo para limpar a variable explorer
rm(list=ls())
data()
View(ChickWeight)
?ChickWeight
frango = ChickWeight
View(frango)
?str
str(frango)
#Histograma
hist(frango$weight, freq = F,xlab = "Peso")
abline(v=mean(frango$weight),lty=2)
mean((frango$weight))
median(frango$weight)
#Add vertical line:
?abline
example(abline)
carros = mtcars
carrocorrelacao = cor(carros)
corrplot(carrocorrelacao, method = 'shade')
correlacao = cor(frango)
correlacao
plot(frango$Time,frango$weight)
#칄 poss칤vel retornar boxplot a partir do plot:
plot(frango$Diet, frango$weight)
plot(frango$Diet, frango$Time)
#Boxplot:
boxplot(frango$weight)
names(frango)
?ChickWeight
#Fun칞칚o table:
table(frango$Time)
table(frango$Diet)
mean(frango$weight)
sd(frango$weight)
#$Barplot e tapply 칠 칩timo
barplot(tapply(frango$weight,frango$Diet,mean))
abline(h=mean(frango$weight, lty=2))
barplot(tapply(frango$weight, frango$Time, mean))
abline(h=mean(frango$weight), lty=1)
#Teste estat칤stico
dieta = matrix()
for (i in 1:4){
dieta[i] = frango[frango$Diet==i,]
}
for (i in 1:4){
dieta[,i] = frango[frango$Diet==i,]
}
dieta
dietadf = data.frame(dieta)
for (i in 1:4){
dieta[i] = frango[frango$Diet==i,frango$weight]
}
View(frango)
for (i in 1:4){
dieta[i] = frango[frango$Diet==i,1]
}
View(dieta)
#Teste estat칤stico
x1 = frango[frango$Diet==1,]
View(x1)
x2 = frango[frango$Diet==2,]
x3 = frango[frango$Diet==3,]
x4 = frango[frango$Diet==4,]
t.test(tapply(frango$weight,frango$Diet==1,mean),tapply(frango$weight,frango$Diet==2,mean))
#Nas dietas 1 e 2
t.test(tapply(frango$weight,frango$Diet==1,mean),tapply(frango$weight,frango$Diet==3,mean))
t.test(tapply(frango$weight,frango$Diet==3,mean),tapply(frango$weight,frango$Diet==4,mean))
#Teste estat칤stico
#Nas dietas 1 e 2
t.test(tapply(frango$weight,frango$Diet==1,mean),tapply(frango$weight,frango$Diet==3,mean))
#Teste estat칤stico
#Nas dietas 1 e 2
t.test(frango[frango$weight,frango$Diet==1],frango[frango$weight,frango$Diet==3])
#Nas dietas 1 e 2
t.test(x1$weight,x3$weight)
t.test(x3$weight,x4$weight)
