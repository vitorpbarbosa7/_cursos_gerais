licence()
contributors()
demo()
error.catching
q()
q()
4 + 5
#Subtração
4 - 5
4 - 5
#Adição
4 + 5
#Subtração
4 - 5
#Divisao
4/6
#Multiplicacao
4*6
4*6e
4*6e
4*6e
4/6
4 - 5
4 ^2
4 ^ 4
2 %% 5
5 %% 2
jeca
jeca <- 24
jeca
variavel <- 10
variavel
string <- vitor
string <- 'vitor'
string
q()
q()
q()
variavel <- "Churros"
variavel
x <- 20 ^2
x
x / 200
clc()
clear()
ls()
q()
q()
ls
clear
cls
clear
l = [1,2,3]
l = (1,2,3)
l = c(1,2,3)
l
ssetwd(C:\Users\Vitor Barbosa\Google Drive\DS\Udemy-R\S2)
x=scan("clipboard",what="string")
#Para ajudar a copiar paths:
path_ = scan("clipboard", what="string")
setwd(path_)
#Para ajudar a copiar paths:
path_ = scan("clipboard", what="string")
setwd(path_)
path_
setwd(C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2)
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2")
rep("abc", 3)
rep(c("a","b","c")times = 3)
rep(c("a","b","c"),times = 3)
rep(c("a","b","c"), each = 3)
rep(c("a", "b", "c"), each =3, times = 2)
sample(1:5,10, replace=T)
#FunÃ§Ã£o set.seed para a funÃ§Ã£o sample funcionar de uma maneira pseudo-aleatÃ³ria
#Como se fosse o random_state no python lindo
set.seed(22)
sample(1:10,5)
sample(1:10,5)
#FunÃ§Ã£o set.seed para a funÃ§Ã£o sample funcionar de uma maneira pseudo-aleatÃ³ria
#Como se fosse o random_state no python lindo
set.seed(22)
sample(1:10,5)
set.seed(22)
sample(1:10,5)
set.seed(22)
sample(1:10,5)
set.seed(22)
sample(1:10,5)
set.seed(22)
sample(1:10,5)
set.seed(22)
sample(1:10,5)
#CriaÃ§Ã£o dos maravilhosos DataFrames:
x = data.frame("a"=1:5, "b" = c("a","b","c","d","e"))
?sample
dados = data.frame("genero" = c(rep("masculino",12),rep("feminino",14)),
"altura" = sample(150:172,26,replace = TRUE)/100,
"peso" = sample(60:75,26,replace = TRUE),
"nota" = sample(4:10,26,replace = TRUE),
"lateralidade" = sample(c("canhoto","destro"),26,replace = TRUE, prob =c(0.8,0.2)))
View(dados)
#SumÃ¡rio das informaÃ§Ãµes do dataframe:
summary(dados)
table(dados)
library(dplyr)
install.packages("dplyr")
distinct(dados)
distinct(dados)
library(dplyr)
distinct(dados)
unique.data.frame(dados)
#Para uma coluna:
unique.data.frame(dados$lateralidade)
#Para uma coluna:
distinct(dados$lateralidade)
#Para uma coluna:
lateralidade = dados$lateralidade
#Para uma coluna:
lateralidade = data.frame(dados$lateralidade)
unique.data.frame(lateralidade)
View(lateralidade)
distinct(lateralidade)
#Carregar outra biblioteca porque estas ai de cima nÃ£o funcionaram:
library(plyr)
lateralidade_count = ldply(dados, function(c), sum(c=="canhoto"))
lateralidade_count = ldply(dados, function(c) sum(c=="canhoto"))
View(lateralidade_count)
lateralidade_count = ldply(dados$lateralidade, function(c) sum(c=="canhoto"))
View(lateralidade_count)
View(lateralidade_count)
sum(lateralidade_count)
lateralidade_count = sum(ldply(dados$lateralidade, function(c) sum(c=="canhoto")))
#Salvar os dados com a funÃ§Ã£o write:
write.csv(dados, 'dados1.csv')
#Criando mais colunas:
dados$cor_favorita = c(sample(c("azul","vermelho","verde","amarelo")),26)
#Criando mais colunas:
dados$cor_favorita = c(sample(c("azul","vermelho","verde","amarelo"),26, replace = TRUE))
dados$imc = dados$peso / (dados$altura^2)
View(dados)
head(dados)
laranja = Orange
View(laranja)
# CÃ³digo para limpeza da tela
cat("\014")
#CÃ³digo para limpar a variable explorer
rm(list=ls())
laranja = Orange
View(laranja)
View(laranja)
summary(laranja)
x = c(1:3)
#FunÃ§Ã£o dimensÃ£o
dim(laranja)
dim(x)
#FunÃ§Ã£o para length
length(x)
length(laranja)
length(laranja$Tree)
#Diretamente o nÃºmero de linhas:
nrow(laranja)
ncol(laranja)
ncol(x)
nrow(x)
rownames(laranja)
#Nome das colunas
colnames(laranja)
names(laranja)
#Atribuindo nomes aos valores do vetor:
?names
names() = c("a","b","c")
names(x) = c("a","b","c")
x
#Trabalhando com formato de dados
class(x)
class(laranja)
class(laranja$Tree)
class(laranja$age)
class(laranja$circumference)
#MÃ©dia:
mean(laranja$Tree)
mean(laranja$circumference)
mean(laranja$age)
?colMeans
colMeans(df)
colMeans(laranja)
colMeans(laranja$age,laranja$circumference)
colMeans(c(laranja$age,laranja$circumference)
medias = colMeans(c(laranja$age,laranja$circumference)
colMeans(c(laranja$age,laranja$circumference)
a = colMeans(c(laranja$age,laranja$circumference)
a = colMeans(c(laranja$age,laranja$circumference))
a = colMeans(data.frame(laranja$age,laranja$circumference))
write.csv(laranja, "laranja.csv")
setwd(C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\10_ManipularDados2)
# CÃ³digo para limpeza da tela
cat("\014")
#CÃ³digo para limpar a variable explorer
rm(list=ls())
laranja = Orange
write.csv(laranja, "laranja.csv")
summary(laranja)
x = c(1:3)
#FunÃ§Ã£o dimensÃ£o
dim(laranja)
dim(x)
#FunÃ§Ã£o para length
length(x)
#lenght em dataframes mostra o nÃºmero de colunas
length(laranja)
#length da coluna me fornece o nÃºmero de linhas da Ã¡rvore
length(laranja$Tree)
#Diretamente o nÃºmero de linhas:
nrow(laranja)
nrow(x) #NÃ£o funciona, vetor nÃ£o tem linhas
ncol(laranja)
ncol(x) #NÃ£o funciona, vetor nÃ£o tem colunas
#Nome das linhas
rownames(laranja)
#Nome das colunas
colnames(laranja)
names(laranja)
#Atribuindo nomes aos valores do vetor:
?names
names(x) = c("a","b","c")
x
#Trabalhando com formato de dados
#Retornando formato dos dados:
class(x)
class(laranja)
class(laranja$Tree)
class(laranja$age)
class(laranja$circumference)
#MÃ©dia:
#Coluna nÃ£o numÃ©rica nÃ£o Ã© possÃ­vel
#Esta coluna Ã© um fator ordenado
mean(laranja$Tree)
mean(laranja$circumference)
mean(laranja$age)
a = colMeans(data.frame(laranja$age,laranja$circumference))
write.csv(laranja, "laranja.csv")
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\10_ManipularDados2")
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\10_ManipularDados2")
# CÃ³digo para limpeza da tela
cat("\014")
#CÃ³digo para limpar a variable explorer
rm(list=ls())
laranja = Orange
write.csv(laranja, "laranja.csv")
summary(laranja)
x = c(1:3)
#FunÃ§Ã£o dimensÃ£o
dim(laranja)
dim(x)
#FunÃ§Ã£o para length
length(x)
#lenght em dataframes mostra o nÃºmero de colunas
length(laranja)
#length da coluna me fornece o nÃºmero de linhas da Ã¡rvore
length(laranja$Tree)
#Diretamente o nÃºmero de linhas:
nrow(laranja)
nrow(x) #NÃ£o funciona, vetor nÃ£o tem linhas
ncol(laranja)
ncol(x) #NÃ£o funciona, vetor nÃ£o tem colunas
#Nome das linhas
rownames(laranja)
#Nome das colunas
colnames(laranja)
names(laranja)
#Atribuindo nomes aos valores do vetor:
?names
names(x) = c("a","b","c")
x
#Trabalhando com formato de dados
#Retornando formato dos dados:
class(x)
class(laranja)
class(laranja$Tree)
class(laranja$age)
class(laranja$circumference)
#MÃ©dia:
#Coluna nÃ£o numÃ©rica nÃ£o Ã© possÃ­vel
#Esta coluna Ã© um fator ordenado
mean(laranja$Tree)
mean(laranja$circumference)
mean(laranja$age)
a = colMeans(data.frame(laranja$age,laranja$circumference))
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\10_ManipularDados2")
# CÃ³digo para limpeza da tela
cat("\014")
#CÃ³digo para limpar a variable explorer
rm(list=ls())
laranja = Orange
write.csv(laranja, "laranja.csv")
summary(laranja)
x = c(1:3)
#FunÃ§Ã£o dimensÃ£o
dim(laranja)
dim(x)
#FunÃ§Ã£o para length
length(x)
#lenght em dataframes mostra o nÃºmero de colunas
length(laranja)
#length da coluna me fornece o nÃºmero de linhas da Ã¡rvore
length(laranja$Tree)
#Diretamente o nÃºmero de linhas:
nrow(laranja)
nrow(x) #NÃ£o funciona, vetor nÃ£o tem linhas
ncol(laranja)
ncol(x) #NÃ£o funciona, vetor nÃ£o tem colunas
#Nome das linhas
rownames(laranja)
#Nome das colunas
colnames(laranja)
names(laranja)
#Atribuindo nomes aos valores do vetor:
?names
names(x) = c("a","b","c")
x
#Trabalhando com formato de dados
#Retornando formato dos dados:
class(x)
class(laranja)
class(laranja$Tree)
class(laranja$age)
class(laranja$circumference)
#MÃ©dia:
#Coluna nÃ£o numÃ©rica nÃ£o Ã© possÃ­vel
#Esta coluna Ã© um fator ordenado
mean(laranja$Tree)
mean(laranja$circumference)
mean(laranja$age)
a = colMeans(data.frame(laranja$age,laranja$circumference))
#Transformar em caracter:
laranja$Tree = character(laranja$tree)
#Transformar em caracter:
laranja$Tree = character(laranja$Tree)
#Transformar em caracter:
laranja$Tree = as.character(laranja$Tree)
class(laranja$Tree)
source('C:/Users/Vitor Barbosa/Google Drive/DS/Udemy-R/S2/10_ManipularDados2/Orange.R')
laj = data.frame("Tree" =  as.factor(rep(c(6,7),each=7)),
"age" =  rep(c(118,484,664,1004,1231,1372,1582),times = 2),
"circumference" = c(30,60,90,120,130,140,150,25,050,70,80,90,100,115))
View(laj)
?rbind
linhas = rbind(laranja, laj)
View(linhas)
View(linhas)
colunas = cbind(laranja, laj)
colunas = cbind(laranja, laj1)
laj1 = data.frame("Tree" = laranja$Tree, "idade_quadrada" = laranja$age^2)
colunas = cbind(laranja, laj1)
View(laj1)
View(colunas)
View(laj1)
fusao = merge(laranja, laj1)
View(fusao)
#Especificando por onde realizar a fusÃ£o:
fusao2 = merge(laranja, laj1, by="Tree")
fusao3 = merge(laranja, laj1, by.x = "Tree", by.y = "Tree")
laj2 = data.frame("Arvore" = laranja$Tree, "idade_quadrada" = laranja$age^2)
#Se houveressem nomes diferentes nestes dataframes:
fusao3 = merge(laranja, laj2, by.x = "Tree", by.y = "Arvore")
View(fusao3)
#Contar variÃ¡veis:
dados1 = read.csv(dados1.csv)
#Contar variÃ¡veis:
dados1 = read.csv("dados1.csv")
table(laranja$age)
table(dados1$peso)
hist(dados1$peso)
hist(dados1$peso, freq = F)
tabledf = data.frame(table(laranja$age))
View(tabledf)
View(laj2)
setwd(C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\12_Apply)
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\12_Apply")
dados2 = data.frame("col1" = 1:5,
"col2" = c(5,6,9,10,20))
dados2
?apply
apply(dados2, 2, sum) #Soma das colunas
apply(dados2,1,sum) #soma das linhas
View(dados2)
#Utilizando a mÃ©dia com o apply:
apply(dados2,2,mean)
colMeans(dados2)
#Para a linha:
apply(dados, 1, mean)
#Para a linha:
apply(dados2, 1, mean)
#FunÃ§Ã£o tapply:
?tapply
dados3 = data.frame("col1" = c(1:5),
"col2" = c(5,6,9,10,20)
"col3" = c("a","b","b","a","a"))
dados3 = data.frame("col1" = c(1:5),
"col2" = c(5,6,9,10,20),
"col3" = c("a","b","b","a","a"))
dados3
tapply(dados3col1, dados3$col3, mean)
tapply(dados3$col1, dados3$col3, mean)
dados = c(3,4,2,2.1)
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\13_Plot")
# CÃ³digo para limpeza da tela
cat("\014")
#CÃ³digo para limpar a variable explorer
rm(list=ls())
dados = c(3,4,2,2.1)
plot(dados)
# plot(dados,type = "l")
plot(dados,type = "l")
plot(dados, type = "o")
# plot(dados)
# plot(dados,type = "l")
plot(dados, type = "o")
#Histograma:
hist(dados)
hist(dados, freq = F)
#barplot
barplot(dados)
#boxplot:
boxplot(dados)
#pizza:
pie(dados)
barplot(dados,
main = "TÃ­tulo do grÃ¡fico"
xlab = "Nome do eixo x",
ylab = "Nome do eixo y",
names.arg= c("Segunda","TerÃ§a","Quarta","Quinta","Sexta"))
barplot(dados,
main = "TÃ­tulo do grÃ¡fico",
xlab = "Nome do eixo x",
ylab = "Nome do eixo y",
names.arg= c("Segunda","TerÃ§a","Quarta","Quinta","Sexta"))
dados = c(3,4,2,2,1)
barplot(dados,
main = "TÃ­tulo do grÃ¡fico",
xlab = "Nome do eixo x",
ylab = "Nome do eixo y",
names.arg= c("Segunda","TerÃ§a","Quarta","Quinta","Sexta"))
?data
data()
dados = read.csv("Flowrates.csv")
dados = read.csv("Flowrates_.csv")
setwd("C:\\Users\\Vitor Barbosa\\Google Drive\\DS\\Udemy-R\\S2\\14_TestesEstatisticos")
dados = read.csv("Flowrates_.csv")
#Teste de correlaÃ§Ã£o:
cor(dados)
dados = read.csv("Flowrates_.csv",skip = 1)
View(dados)
dados = data.frame(dados)
View(dados)
dados = data.frame(dados)
View(dados)
dados = read.csv("Flowrates_.csv",skip = 1,sep = ";")
dados = data.frame(dados)
View(dados)
#Renomeando a primeira coluna:
names(dados)[1] = "tempo"
View(dados)
#Teste de correlaÃ§Ã£o:
cor(dados$x2,dados$x2)
#Teste de correlaÃ§Ã£o:
cor(dados$x2,dados$x3)
cor(dados)
cor(dados[,2:ncol(dados)])
#Teste de correlaÃ§Ã£o:
cor.test(dados$x2,dados$x3)
#Teste t:
?t.test
#Brincando com o dataset Orange mesmo:
laranja = Orange
laranja2=Orange[Orange$Tree=="1"|Orange$Tree=="2"]
laranja2=Orange[Orange$Tree=="1"|Orange$Tree=="2",]
t.test(laranja2$circumference~laranja$Tree)
t.test(laranja2$circumference~laranja2$Tree)
#Teste t:
t.test(dados$x2,dados$x3)
#Teste t:
t.test(dados$x1,dados$x3)
#Teste t:
t.test(dados$x2,dados$x3)
dados$x6 = sample(1:10,length(dados), replace = TRUE)
#Teste t:
t.test(dados$x2,dados$x6)
