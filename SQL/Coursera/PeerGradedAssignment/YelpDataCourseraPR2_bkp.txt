Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 8090 (foreign key = business_id)
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 3979 (foreign key = business_id)
ix. User = 10000 
x. Friend = 11
xi. Elite_years = 2780
 
Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:

	# Code was automated using Excel 
	SELECT COUNT(*) - COUNT(id) as id, 	COUNT(*) - COUNT(name) as name, 	COUNT(*) - COUNT(review_count) as review_count, 	COUNT(*) - COUNT(yelping_since) as yelping_since, 	COUNT(*) - COUNT(useful) as useful, 	COUNT(*) - COUNT(funny) as funny, 	COUNT(*) - COUNT(cool) as cool, 	COUNT(*) - COUNT(fans) as fans, 	COUNT(*) - COUNT( average_stars) as  average_stars, 	COUNT(*) - COUNT(compliment_hot) as compliment_hot, 	COUNT(*) - COUNT(compliment_more) as compliment_more, 	COUNT(*) - COUNT(compliment_profile) as compliment_profile, 	COUNT(*) - COUNT(compliment_cute) as compliment_cute, 	COUNT(*) - COUNT(compliment_list) as compliment_list, 	COUNT(*) - COUNT(compliment_note) as compliment_note, 	COUNT(*) - COUNT(compliment_plain) as compliment_plain, 	COUNT(*) - COUNT(compliment_cool) as compliment_cool, 	COUNT(*) - COUNT(compliment_funny) as compliment_funny, 	COUNT(*) - COUNT(compliment_writer) as compliment_writer, 	COUNT(*) - COUNT(compliment_photos) as compliment_photos
	FROM user
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: 
	
		SELECT city, SUM(review_count) as total_reviews_percity
	 	FROM business
		GROUP BY city
		ORDER BY SUM(review_count) desc
	
	
	Copy and Paste the Result Below:

		+-----------------+-----------------------+
		| city            | total_reviews_percity |
		+-----------------+-----------------------+
		| Las Vegas       |                 82854 |
		| Phoenix         |                 34503 |
		| Toronto         |                 24113 |
		| Scottsdale      |                 20614 |
		| Charlotte       |                 12523 |
		| Henderson       |                 10871 |
		| Tempe           |                 10504 |
		| Pittsburgh      |                  9798 |
		| Montréal        |                  9448 |
		| Chandler        |                  8112 |
		| Mesa            |                  6875 |
		| Gilbert         |                  6380 |
		| Cleveland       |                  5593 |
		| Madison         |                  5265 |
		| Glendale        |                  4406 |
		| Mississauga     |                  3814 |
		| Edinburgh       |                  2792 |
		| Peoria          |                  2624 |
		| North Las Vegas |                  2438 |
		| Markham         |                  2352 |
		| Champaign       |                  2029 |
		| Stuttgart       |                  1849 |
		| Surprise        |                  1520 |
		| Lakewood        |                  1465 |
		| Goodyear        |                  1155 |
		+-----------------+-----------------------+
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT stars, COUNT(*) as count
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
	+-------+-------+
	| stars | count |
	+-------+-------+
	|   1.5 |     1 |
	|   2.5 |     2 |
	|   3.5 |     3 |
	|   4.0 |     2 |
	|   4.5 |     1 |
	|   5.0 |     1 |
	+-------+-------+


ii. Beachwood

SQL code used to arrive at answer:

	SELECT stars, COUNT(*) as count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

	+-------+-------+
	| stars | count |
	+-------+-------+
	|   2.0 |     1 |
	|   2.5 |     1 |
	|   3.0 |     2 |
	|   3.5 |     2 |
	|   4.0 |     1 |
	|   4.5 |     2 |
	|   5.0 |     5 |
	+-------+-------+


7. Find the top 3 users based on their total number of reviews:
				
		SELECT id, name, review_count
		from user
		ORDER BY review_count desc
		LIMIT 3
				
	Copy and Paste the Result Below:

		+------------------------+--------+--------------+
		| id                     | name   | review_count |
		+------------------------+--------+--------------+
		| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
		| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
		| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
		+------------------------+--------+--------------+
			

8. Does posing more reviews correlate with more fans?

	The pearson correlation coefficient was not high, so no. 

	Please explain your findings and interpretation of the results:

	# I calculated the pearson correlation coefficient, making use of the built-in aggregate function AVG with the correlation expression. 
	In SQL Server it is easier since the VAR function to compute variance is available

	The pearson correlation coefficient was 0.437.
	

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: "love"

	
	SQL code used to arrive at answer:

	SELECT COUNT(*)
	FROM review
	WHERE lower(text) LIKE "%hate%"
	UNION 
	SELECT COUNT(*)
	FROM review
	WHERE lower(text) LIKE "%love%"

		
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

		SELECT id, name, fans
		FROM user
		ORDER BY fans desc
		LIMIT 10
	
	
	Copy and Paste the Result Below:

		+------------------------+-----------+------+
		| id                     | name      | fans |
		+------------------------+-----------+------+
		| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
		| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
		| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
		| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
		| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
		| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
		| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
		| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
		| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
		| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
		+------------------------+-----------+------+	
	
Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

	I choose the Toronto city and Bars category
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	
	Yes, they do have a different distribuition of hours along the week in which they stay open to the public. 
	The ones with higher rate opens approximately at 16:00 or 18:00 and closes 2:00, whilst the ones with lower rate opens 11:00 and closes 2:00, in general. 

	#Table:
	+-----------------------+-------+----------+------------------------+--------------------+
	| hours                 | stars | category | id                     | name               |
	+-----------------------+-------+----------+------------------------+--------------------+
	| Monday|16:00-2:00     |   4.5 | Bars     | -n27mJ_jQWGCuIukTvg9Mg | Cabin Fever        |
	| Tuesday|18:00-2:00    |   4.5 | Bars     | -n27mJ_jQWGCuIukTvg9Mg | Cabin Fever        |
	| Friday|18:00-2:00     |   4.5 | Bars     | -n27mJ_jQWGCuIukTvg9Mg | Cabin Fever        |
	| Wednesday|18:00-2:00  |   4.5 | Bars     | -n27mJ_jQWGCuIukTvg9Mg | Cabin Fever        |
	| Thursday|18:00-2:00   |   4.5 | Bars     | -n27mJ_jQWGCuIukTvg9Mg | Cabin Fever        |
	| Sunday|16:00-2:00     |   4.5 | Bars     | -n27mJ_jQWGCuIukTvg9Mg | Cabin Fever        |
	| Saturday|16:00-2:00   |   4.5 | Bars     | -n27mJ_jQWGCuIukTvg9Mg | Cabin Fever        |
	| Tuesday|15:00-21:00   |   4.0 | Bars     | 2NDuJhdBPAz-ovtHB8Z86A | Halo Brewery       |
	| Friday|15:00-21:00    |   4.0 | Bars     | 2NDuJhdBPAz-ovtHB8Z86A | Halo Brewery       |
	| Wednesday|15:00-21:00 |   4.0 | Bars     | 2NDuJhdBPAz-ovtHB8Z86A | Halo Brewery       |
	| Thursday|15:00-21:00  |   4.0 | Bars     | 2NDuJhdBPAz-ovtHB8Z86A | Halo Brewery       |
	| Sunday|11:00-21:00    |   4.0 | Bars     | 2NDuJhdBPAz-ovtHB8Z86A | Halo Brewery       |
	| Saturday|11:00-21:00  |   4.0 | Bars     | 2NDuJhdBPAz-ovtHB8Z86A | Halo Brewery       |
	| Monday|15:00-1:00     |   3.5 | Bars     | 0WBMEfqXQnEOAIkV-uCW6w | The Charlotte Room |
	| Tuesday|15:00-1:00    |   3.5 | Bars     | 0WBMEfqXQnEOAIkV-uCW6w | The Charlotte Room |
	| Friday|15:00-2:00     |   3.5 | Bars     | 0WBMEfqXQnEOAIkV-uCW6w | The Charlotte Room |
	| Wednesday|15:00-1:00  |   3.5 | Bars     | 0WBMEfqXQnEOAIkV-uCW6w | The Charlotte Room |
	| Thursday|15:00-1:00   |   3.5 | Bars     | 0WBMEfqXQnEOAIkV-uCW6w | The Charlotte Room |
	| Saturday|18:00-2:00   |   3.5 | Bars     | 0WBMEfqXQnEOAIkV-uCW6w | The Charlotte Room |
	| Monday|11:00-2:00     |   2.5 | Bars     | 1zbleOExOpyEA525GbRyqA | The Fox & Fiddle   |
	| Tuesday|11:00-2:00    |   2.5 | Bars     | 1zbleOExOpyEA525GbRyqA | The Fox & Fiddle   |
	| Friday|11:00-2:00     |   2.5 | Bars     | 1zbleOExOpyEA525GbRyqA | The Fox & Fiddle   |
	| Wednesday|11:00-2:00  |   2.5 | Bars     | 1zbleOExOpyEA525GbRyqA | The Fox & Fiddle   |
	| Thursday|11:00-2:00   |   2.5 | Bars     | 1zbleOExOpyEA525GbRyqA | The Fox & Fiddle   |
	| Sunday|10:00-2:00     |   2.5 | Bars     | 1zbleOExOpyEA525GbRyqA | The Fox & Fiddle   |
	+-----------------------+-------+----------+------------------------+--------------------+
(Output limit exceeded, 25 of 26 total rows shown)


ii. Do the two groups you chose to analyze have a different number of reviews?
         
         Yes, they do have a different number of reviews. But from the table below we can see that is not strictly correlated with the 
         stars. 

			+----------------------+-------+----------+------------------------+--------------------+---------------------+
			| hours                | stars | category | id                     | name               | SUM(b.review_count) |
			+----------------------+-------+----------+------------------------+--------------------+---------------------+
			| Saturday|16:00-2:00  |   4.5 | Bars     | -n27mJ_jQWGCuIukTvg9Mg | Cabin Fever        |                 182 |
			| Saturday|11:00-21:00 |   4.0 | Bars     | 2NDuJhdBPAz-ovtHB8Z86A | Halo Brewery       |                  90 |
			| Saturday|18:00-2:00  |   3.5 | Bars     | 0WBMEfqXQnEOAIkV-uCW6w | The Charlotte Room |                  60 |
			| Saturday|10:00-2:00  |   2.5 | Bars     | 1zbleOExOpyEA525GbRyqA | The Fox & Fiddle   |                 245 |
			+----------------------+-------+----------+------------------------+--------------------+---------------------+


iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	The ones with higher hate are next to the bloor train station and High Park Zoo and the others not. 

SQL code used for analysis:

	#i - Code First I used this code to see the categories in Toronto:

			SELECT c.category, COUNT(c.category) as count_category, b.*
			FROM business as b
			INNER JOIN category as c ON b.id = c.business_id
			WHERE b.city = 'Toronto'
			GROUP BY c.category
			ORDER BY count_category desc	

	#Main Code:
	# I need to see hours column from hours table, stars column from business table and category column with category table together, so:

		  SELECT h.hours, b.stars, c.category, b.id, b.name
		  FROM business as b
		  INNER JOIN category as c ON b.id = c.business_id #To visualize the categories alongside with stars from business table
		  INNER JOIN hours as h ON b.id = h.business_id #To visualize the hours from the hours table with category and stars from the previous #tables
		  WHERE b.city = 'Toronto' and c.category = 'Bars' #My selected city and category
		  ORDER BY b.stars desc #To see the higher rated business first

	# ii - Code:
		# Using the code above, it was only necessary to use SUM(b.review_count) so that is possible to group the data by name and sum the #review_count

			  SELECT h.hours, b.stars, c.category, b.id, b.name, SUM(b.review_count)
			  FROM business as b
			  INNER JOIN category as c ON b.id = c.business_id
			  INNER JOIN hours as h ON b.id = h.business_id
			  WHERE b.city = 'Toronto' and c.category = 'Bars'
			  GROUP BY name
			  ORDER BY b.stars desc

	#iii - Code
			  SELECT h.hours, b.stars, c.category, b.name, b.latitude, b.longitude 
			  FROM business as b
			  INNER JOIN category as c ON b.id = c.business_id
			  INNER JOIN hours as h ON b.id = h.business_id
			  WHERE b.city = 'Toronto' and c.category = 'Bars'
			  GROUP BY name
			  ORDER BY b.stars desc
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
         The ones which are still open have an average of 31.76 review_count whilst the ones closed appears with 23.20

ii. Difference 2:
         
         The ones still open have a mean of 0.26 times in which was categorized with the funny flag whilst this same number for the closed ones is 0.21
         
         
SQL code used for analysis:
		# Tried to seek differences regarding review_count, stars from business table and about the flags funny and cool from review table
		SELECT b.is_open, AVG(b.review_count), AVG(b.stars), AVG(r.funny), AVG(r.cool)
		FROM business as b
		INNER JOIN review as r ON b.id = r.business_id
		GROUP BY b.is_open

	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
         Analysis to check if there is a correlation among stars and photos taken inside or outside
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
          It will be necessary to have the data which includes the stars and review_count from the business table and the labels from the photo table, so that we can group by labels and check the differences between inside and outside. This data can tell us if in general is better to open a business inside or outside to receive better reviews. 

iii. Output of your finished dataset:

		+---------------+---------------+---------+
		|      avgstars |    avgreviews | label   |
		+---------------+---------------+---------+
		|          3.25 |         984.5 | menu    |
		| 3.71739130435 | 367.594202899 | outside |
		| 3.73086734694 | 342.908163265 | food    |
		| 3.76086956522 | 422.086956522 | inside  |
		|           3.8 |        154.36 | drink   |
		+---------------+---------------+---------+
         
         
iv. Provide the SQL code you used to create your final dataset:

		SELECT AVG(b.stars) as avgstars, AVG(b.review_count) as avgreviews, p.label
		FROM business as b
		INNER JOIN photo as p ON b.id = p.business_id 
		GROUP BY p.label
		ORDER BY AVG(b.stars)
