install.packages('tidyverse')
library('rvest')
install.packages("libcurl4-openssl-dev")
install.packageS('tidyverse')
install.packages('tidyverse')
install.packages("stringi")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel', force = TRUE)
IRkernel::installspec()
a√ßlsdkfj
IRkernel::installspec(user = FALSE0)
require(nonlinearTseries)
install.packages(nonlinearTseries)
install.packages('nonlinearTseries')
# install.packages('nonlinearTseries')
require(nonlinearTseries)
series = read.csv('data/aapl.csv')
source("/media/vpb/GD_/USP/DS/01Git/00_datascience_general/01_timeseries/10_embedding_in_R.R")
series = read.csv('data/aapl.csv')
setwd('/media/vpb/GD_/USP/DS/01Git/00_datascience_general/01_timeseries')
series = read.csv('data/aapl.csv')
plot(series)
acf(series)
acf(series,lag.max = 50)
?plot
plot(series, pch = 20)
lines(series)
line(series)
lines(series)
acf(series,lag.max = 200)
series
View(series)
series = read.csv('data/aapl.csv')
series
lines(series)
plot(series, pch = 20)
acf(series,lag.max = 200)
plot(series, pch = 20)
View(series)
acf(series,lag.max = 200)
plot(series, pch = 20)
plot(y = series, pch = 20)
lines(series)
plot(series, pch = 20)
acf(series,lag.max = 200)
lines(series)
plot(series, pch = 20)
boxplot(series)
plot(series)
plot(series[,0], series[,1])
plot(x = series[,0], y = series[,1])
phase = cbind(series[1:len(series-)-1, series[1:len(series)]]
phase = cbind(series[1:len(series-)-1, series[1:len(series)]])
phase = cbind(series[1:len(series)-1, series[1:len(series)]])
phase = cbind(series[1:length(series)-1, series[1:length(series)]])
series[1:2]
series = c(read.csv('data/aapl.csv'))
series = as.array((read.csv('data/aapl.csv'))
series
series = as.array((read.csv('data/aapl.csv'))
View(series)
series = read.csv('data/aapl.csv')
series
series = as.vector(read.csv('data/aapl.csv'))
View(series)
lines(series)
plot(series, pch = 20)
acf(series,lag.max = 200)
series[1:2]
series = as.vector(read.csv('data/aapl.csv'))
series = as.vector(read.csv('data/aapl.csv')$close)
qseries
lines(series)
lines(series)
plot(series, pch = 20)
acf(series,lag.max = 200)
lines(series)
plot(series, pch = 20)
acf(series,lag.max = 200)
series[1:2]
phase = cbind(series[1:length(series)-1, series[1:length(series)]])
length(series)
series[1:2]
phase = cbind(series[1:length(series)-1], series[1:length(series)])
View(phase)
phase = cbind(series[1:length(series)-1], series[2:length(series)])
plot(x = phase[,0], y = phase[,1])
phase[0]
View(phase)
plot(x = phase$V1, y = phase$V2)
phase = as.data.frame(cbind(series[1:length(series)-1], series[2:length(series)]))
plot(x = phase$V1, y = phase$V2)
phase = as.data.frame(cbind(series[1:length(series)-lag], series[1 + lag:length(series)]))
lag = 15
phase = as.data.frame(cbind(series[1:length(series)-lag], series[1 + lag:length(series)]))
series[1:length(series) - lag]
length(series) - lag
series[1:1222]
length(series) - lag
length(series) - lag
series[1:1222]
series[1:length(series) - lag]
lag(series, lag)
phase = as.data.frame(cbind(series, lag(series,lag))
plot(x = phase$V1, y = phase$V2)
phase = as.data.frame(cbind(series, lag(series,lag)))
plot(x = phase$V1, y = phase$V2)
View(phase)
lag = 15
series[1:length(series) - lag]
lag(series,lag)
len(series)
length(series)
length(lag(series,lag))
lagged = lag(series,lag)
length(lagged)
lagged = lag(series,lag)
par(mfrow = (2,1))
par(mfrow = c(2,2))
plot(series)
plot(lagged)
par(mfrow = c(1,2))
plot(series)
plot(lagged)
lag = 500
length(series)
lagged = lag(series,lag)
length(lagged)
par(mfrow = c(1,2))
plot(series)
plot(lagged)
dflagged = as.data.frame(lagged)
View(dflagged)
View(phase)
lag = -500
length(series)
lagged = lag(series,lag)
dflagged = as.data.frame(lagged)
length(lagged)
par(mfrow = c(1,2))
plot(series)
plot(lagged)
lag = 15
series[1:length(series)-lag]
end = length(series)-lag
series[1:length(series)-lag]
series[1:end]
end = length(series)-lag
series[1:end]
phase = as.data.frame(cbind(series[1:end],series[lag:]))
phase = as.data.frame(cbind(series[1:end],series[lag:length(series)]))
series[lag:length(series)]
cbind(series[1:end],series[lag:length(series)])
end = length(series)-lag
series[1:end]
length(series[1:end])
series[lag:length(series)]
length(series[lag:length(series)])
end = length(series)-lag+1
length(series[1:end])
length(series[lag:length(series)])
cbind(series[1:end],series[lag:length(series)])
phase = as.data.frame(cbind(series[1:end],series[lag:length(series)]))
plot(x = phase$V1, y = phase$V2)
# lagging -----------------------------------------------------------------
lag = 30
end = length(series)-lag+1
length(series[1:end])
length(series[lag:length(series)])
phase = as.data.frame(cbind(series[1:end],series[lag:length(series)]))
plot(x = phase$V1, y = phase$V2)
# lagging -----------------------------------------------------------------
lag = 30
end = length(series)-lag+1
length(series[1:end])
length(series[lag:length(series)])
phase = as.data.frame(cbind(series[1:end],series[lag:length(series)]))
plot(x = phase$V1, y = phase$V2)
par(mfrow = 1)
par(mfrow = c(1))
par(mfrow = c(1,0))
par(mfrow = c(1,1))
lag = 30
end = length(series)-lag+1
length(series[1:end])
length(series[lag:length(series)])
phase = as.data.frame(cbind(series[1:end],series[lag:length(series)]))
plot(x = phase$V1, y = phase$V2)
# Takens ------------------------------------------------------------------
buildTakens(series, embedding.dim = 6, time.lag = 60)
# Takens ------------------------------------------------------------------
takens = buildTakens(series, embedding.dim = 6, time.lag = 60)
View(takens)
# acf ---------------------------------------------------------------------
pacf(series)
# acf ---------------------------------------------------------------------
pacf(series, lag.max = 300)
# acf ---------------------------------------------------------------------
plot(series)
pacf(series, lag.max = 300)
pacf(series, lag.max = 800)
pacf(series, lag.max = 1200)
acf(series, lag.max = 1200)
# lagging with buildtakens ------------------------------------------------
plot(buildTakens(series, 2, 60))
# lagging with buildtakens ------------------------------------------------
plot(buildTakens(series, 2, 500))
# lagging with buildtakens ------------------------------------------------
plot(buildTakens(series, 2, 30))
recurrencePlot(takens)
recurrencePlot(takens, radius = 0.2)
recurrencePlot(takens, radius = 0.1)
recurrencePlot(takens, radius = 0.8)
recurrencePlot(takens, radius = 10)
recurrencePlot(takens, radius = 15)
